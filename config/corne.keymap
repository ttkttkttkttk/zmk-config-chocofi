/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        CapsLock {
            bindings = <&caps_word>;
            key-positions = <25 34>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Letters {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&trans  &kp Q  &kp W  &kp F           &kp P  &kp B        &kp J    &kp L  &kp U      &kp Y    &kp SQT   &trans
&trans  &kp A  &kp R  &kp S           &kp T  &kp G        &kp M    &kp N  &kp E      &kp I    &kp O     &trans
&trans  &kp Z  &kp X  &kp C           &kp D  &kp V        &kp K    &kp H  &kp COMMA  &kp DOT  &kp FSLH  &trans
                      &kp LEFT_SHIFT  &mo 3  &kp SPACE    &kp RET  &mo 1  &mo 2
            >;
        };

        NumSym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp PLUS   &kp N7        &kp N8        &kp N9        &kp ASTERISK  &trans
&trans  &trans  &kp DOLLAR       &kp PERCENT   &kp CARET             &kp TILDE                &kp MINUS  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp SLASH     &trans
&trans  &trans  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH              &kp GRAVE                &kp N0     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL     &trans
                                 &trans        &trans                &trans                   &trans     &trans        &trans
            >;
        };

        SymComFunc {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE     &kp RIGHT_BRACE   &sk LCTRL         &kp K_COPY   &kp HOME       &kp K_UNDO  &kp LS(LA(TAB))  &kp PRINTSCREEN  &trans
&trans  &kp PIPE          &kp COLON          &kp DOUBLE_QUOTES  &kp QUESTION      &sk LEFT_SHIFT    &kp K_PASTE  &kp BACKSPACE  &kp DELETE  &kp LA(TAB)      &kp LEFT_ALT     &trans
&trans  &kp BACKSLASH     &kp SEMICOLON      &kp LESS_THAN      &kp GREATER_THAN  &kp CAPS          &kp K_CUT    &kp END        &kp K_REDO  &kp ESCAPE       &kp LEFT_WIN     &trans
                                             &trans             &trans            &trans            &trans       &trans         &trans
            >;
        };

        Misc {
            bindings = <
&trans  &kp V      &kp LS(LC(T))  &kp LC(W)        &kp LC(T)    &kp LA(Y)    &bt BT_CLR_ALL  &trans        &trans        &trans        &trans  &trans
&trans  &kp LEFT   &kp DOWN       &kp UP           &kp RIGHT    &kp LA(M)    &bt BT_CLR      &bt BT_SEL 3  &bt BT_SEL 4  &trans        &trans  &trans
&trans  &kp LS(V)  &kp LA(F4)     &kp LS(LC(TAB))  &kp LC(TAB)  &trans       &trans          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans  &trans
                                  &trans           &trans       &trans       &trans          &trans        &trans
            >;
        };
    };
};
